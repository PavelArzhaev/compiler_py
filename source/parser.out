Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> main_class class_s
Rule 2     start -> main_class
Rule 3     main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET
Rule 4     class_s -> class_s class
Rule 5     class_s -> class
Rule 6     class -> CLASS id L_BRACKET R_BRACKET
Rule 7     class -> CLASS id L_BRACKET var_s R_BRACKET
Rule 8     class -> CLASS id L_BRACKET method_s R_BRACKET
Rule 9     class -> CLASS id L_BRACKET var_s method_s R_BRACKET
Rule 10    class -> CLASS id EXTENDS id L_BRACKET R_BRACKET
Rule 11    class -> CLASS id EXTENDS id L_BRACKET var_s R_BRACKET
Rule 12    class -> CLASS id EXTENDS id L_BRACKET method_s R_BRACKET
Rule 13    class -> CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET
Rule 14    var_s -> var_s var
Rule 15    var_s -> var
Rule 16    var -> type id SEMICOLON
Rule 17    method_s -> method_s method
Rule 18    method_s -> method
Rule 19    method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
Rule 20    method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
Rule 21    method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
Rule 22    method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
Rule 23    arg_s -> empty
Rule 24    arg_s -> arg_s COMMA arg
Rule 25    arg_s -> arg
Rule 26    arg -> type id
Rule 27    modifier -> PUBLIC
Rule 28    modifier -> PRIVATE
Rule 29    type -> INT L_SQUARE R_SQUARE
Rule 30    type -> BOOLEAN
Rule 31    type -> INT
Rule 32    type -> id
Rule 33    statement_s -> statement_s statement
Rule 34    statement_s -> statement
Rule 35    statement -> L_BRACKET statement_s R_BRACKET
Rule 36    statement -> IF L_ROUND exp R_ROUND statement ELSE statement
Rule 37    statement -> WHILE L_ROUND exp R_ROUND statement
Rule 38    statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
Rule 39    statement -> id EQUALS exp SEMICOLON
Rule 40    statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
Rule 41    exp_s -> exp_s COMMA exp
Rule 42    exp_s -> exp
Rule 43    exp -> exp L_SQUARE exp R_SQUARE
Rule 44    exp -> exp DOT LENGTH
Rule 45    exp -> exp DOT id L_ROUND R_ROUND
Rule 46    exp -> exp DOT id L_ROUND exp_s R_ROUND
Rule 47    exp -> INTEGER
Rule 48    exp -> TRUE
Rule 49    exp -> FALSE
Rule 50    exp -> id
Rule 51    exp -> THIS
Rule 52    exp -> NEW INT L_SQUARE exp R_SQUARE
Rule 53    exp -> NEW id L_ROUND R_ROUND
Rule 54    exp -> BANG exp
Rule 55    exp -> L_ROUND exp R_ROUND
Rule 56    exp -> exp AND exp
Rule 57    exp -> exp LESS exp
Rule 58    exp -> exp PLUS exp
Rule 59    exp -> exp MINUS exp
Rule 60    exp -> exp STAR exp
Rule 61    exp -> exp PERCENT exp
Rule 62    exp -> exp OR exp
Rule 63    id -> ID
Rule 64    empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
BANG                 : 54
BOOLEAN              : 30
CLASS                : 3 6 7 8 9 10 11 12 13
COMMA                : 24 41
COMMENT              : 
DOT                  : 44 45 46
ELSE                 : 36
EQUALS               : 39 40
EXTENDS              : 10 11 12 13
FALSE                : 49
ID                   : 63
IF                   : 36
INT                  : 29 31 52
INTEGER              : 47
LENGTH               : 44
LESS                 : 57
L_BRACKET            : 3 3 6 7 8 9 10 11 12 13 19 20 21 22 35
L_ROUND              : 3 19 20 21 22 36 37 38 45 46 53 55
L_SQUARE             : 3 29 40 43 52
MINUS                : 59
NEW                  : 52 53
OR                   : 62
PERCENT              : 61
PLUS                 : 58
PRIVATE              : 28
PUBLIC               : 3 27
RETURN               : 19 20 21 22
R_BRACKET            : 3 3 6 7 8 9 10 11 12 13 19 20 21 22 35
R_ROUND              : 3 19 20 21 22 36 37 38 45 46 53 55
R_SQUARE             : 3 29 40 43 52
SEMICOLON            : 16 19 20 21 22 38 39 40
STAR                 : 60
STATIC_VOID_MAIN     : 3
STRING               : 3
SYSTEM_OUT_PRINTLN   : 38
THIS                 : 51
TRUE                 : 48
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

arg                  : 24 25
arg_s                : 19 20 21 22 24
class                : 4 5
class_s              : 1 4
empty                : 23
exp                  : 19 20 21 22 36 37 38 39 40 40 41 42 43 43 44 45 46 52 54 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62
exp_s                : 41 46
id                   : 3 3 6 7 8 9 10 10 11 11 12 12 13 13 16 19 20 21 22 26 32 39 40 45 46 50 53
main_class           : 1 2
method               : 17 18
method_s             : 8 9 12 13 17
modifier             : 19 20 21 22
start                : 0
statement            : 33 34 36 36 37
statement_s          : 3 19 21 33 35
type                 : 16 19 20 21 22 26
var                  : 14 15
var_s                : 7 9 11 13 14 19 20

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . main_class class_s
    (2) start -> . main_class
    (3) main_class -> . CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    CLASS           shift and go to state 3

    start                          shift and go to state 1
    main_class                     shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> main_class . class_s
    (2) start -> main_class .
    (4) class_s -> . class_s class
    (5) class_s -> . class
    (6) class -> . CLASS id L_BRACKET R_BRACKET
    (7) class -> . CLASS id L_BRACKET var_s R_BRACKET
    (8) class -> . CLASS id L_BRACKET method_s R_BRACKET
    (9) class -> . CLASS id L_BRACKET var_s method_s R_BRACKET
    (10) class -> . CLASS id EXTENDS id L_BRACKET R_BRACKET
    (11) class -> . CLASS id EXTENDS id L_BRACKET var_s R_BRACKET
    (12) class -> . CLASS id EXTENDS id L_BRACKET method_s R_BRACKET
    (13) class -> . CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET

    $end            reduce using rule 2 (start -> main_class .)
    CLASS           shift and go to state 6

    class_s                        shift and go to state 4
    class                          shift and go to state 5

state 3

    (3) main_class -> CLASS . id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 7

state 4

    (1) start -> main_class class_s .
    (4) class_s -> class_s . class
    (6) class -> . CLASS id L_BRACKET R_BRACKET
    (7) class -> . CLASS id L_BRACKET var_s R_BRACKET
    (8) class -> . CLASS id L_BRACKET method_s R_BRACKET
    (9) class -> . CLASS id L_BRACKET var_s method_s R_BRACKET
    (10) class -> . CLASS id EXTENDS id L_BRACKET R_BRACKET
    (11) class -> . CLASS id EXTENDS id L_BRACKET var_s R_BRACKET
    (12) class -> . CLASS id EXTENDS id L_BRACKET method_s R_BRACKET
    (13) class -> . CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET

    $end            reduce using rule 1 (start -> main_class class_s .)
    CLASS           shift and go to state 6

    class                          shift and go to state 9

state 5

    (5) class_s -> class .

    CLASS           reduce using rule 5 (class_s -> class .)
    $end            reduce using rule 5 (class_s -> class .)


state 6

    (6) class -> CLASS . id L_BRACKET R_BRACKET
    (7) class -> CLASS . id L_BRACKET var_s R_BRACKET
    (8) class -> CLASS . id L_BRACKET method_s R_BRACKET
    (9) class -> CLASS . id L_BRACKET var_s method_s R_BRACKET
    (10) class -> CLASS . id EXTENDS id L_BRACKET R_BRACKET
    (11) class -> CLASS . id EXTENDS id L_BRACKET var_s R_BRACKET
    (12) class -> CLASS . id EXTENDS id L_BRACKET method_s R_BRACKET
    (13) class -> CLASS . id EXTENDS id L_BRACKET var_s method_s R_BRACKET
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 10

state 7

    (3) main_class -> CLASS id . L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    L_BRACKET       shift and go to state 11


state 8

    (63) id -> ID .

    L_BRACKET       reduce using rule 63 (id -> ID .)
    EXTENDS         reduce using rule 63 (id -> ID .)
    ID              reduce using rule 63 (id -> ID .)
    SEMICOLON       reduce using rule 63 (id -> ID .)
    L_ROUND         reduce using rule 63 (id -> ID .)
    R_ROUND         reduce using rule 63 (id -> ID .)
    COMMA           reduce using rule 63 (id -> ID .)
    EQUALS          reduce using rule 63 (id -> ID .)
    L_SQUARE        reduce using rule 63 (id -> ID .)
    DOT             reduce using rule 63 (id -> ID .)
    AND             reduce using rule 63 (id -> ID .)
    LESS            reduce using rule 63 (id -> ID .)
    PLUS            reduce using rule 63 (id -> ID .)
    MINUS           reduce using rule 63 (id -> ID .)
    STAR            reduce using rule 63 (id -> ID .)
    PERCENT         reduce using rule 63 (id -> ID .)
    OR              reduce using rule 63 (id -> ID .)
    R_SQUARE        reduce using rule 63 (id -> ID .)


state 9

    (4) class_s -> class_s class .

    CLASS           reduce using rule 4 (class_s -> class_s class .)
    $end            reduce using rule 4 (class_s -> class_s class .)


state 10

    (6) class -> CLASS id . L_BRACKET R_BRACKET
    (7) class -> CLASS id . L_BRACKET var_s R_BRACKET
    (8) class -> CLASS id . L_BRACKET method_s R_BRACKET
    (9) class -> CLASS id . L_BRACKET var_s method_s R_BRACKET
    (10) class -> CLASS id . EXTENDS id L_BRACKET R_BRACKET
    (11) class -> CLASS id . EXTENDS id L_BRACKET var_s R_BRACKET
    (12) class -> CLASS id . EXTENDS id L_BRACKET method_s R_BRACKET
    (13) class -> CLASS id . EXTENDS id L_BRACKET var_s method_s R_BRACKET

    L_BRACKET       shift and go to state 12
    EXTENDS         shift and go to state 13


state 11

    (3) main_class -> CLASS id L_BRACKET . PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    PUBLIC          shift and go to state 14


state 12

    (6) class -> CLASS id L_BRACKET . R_BRACKET
    (7) class -> CLASS id L_BRACKET . var_s R_BRACKET
    (8) class -> CLASS id L_BRACKET . method_s R_BRACKET
    (9) class -> CLASS id L_BRACKET . var_s method_s R_BRACKET
    (14) var_s -> . var_s var
    (15) var_s -> . var
    (17) method_s -> . method_s method
    (18) method_s -> . method
    (16) var -> . type id SEMICOLON
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE
    (63) id -> . ID

    R_BRACKET       shift and go to state 16
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    ID              shift and go to state 8

    id                             shift and go to state 15
    var_s                          shift and go to state 17
    method_s                       shift and go to state 18
    var                            shift and go to state 19
    method                         shift and go to state 20
    type                           shift and go to state 21
    modifier                       shift and go to state 22

state 13

    (10) class -> CLASS id EXTENDS . id L_BRACKET R_BRACKET
    (11) class -> CLASS id EXTENDS . id L_BRACKET var_s R_BRACKET
    (12) class -> CLASS id EXTENDS . id L_BRACKET method_s R_BRACKET
    (13) class -> CLASS id EXTENDS . id L_BRACKET var_s method_s R_BRACKET
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 27

state 14

    (3) main_class -> CLASS id L_BRACKET PUBLIC . STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    STATIC_VOID_MAIN shift and go to state 28


state 15

    (32) type -> id .

    ID              reduce using rule 32 (type -> id .)


state 16

    (6) class -> CLASS id L_BRACKET R_BRACKET .

    CLASS           reduce using rule 6 (class -> CLASS id L_BRACKET R_BRACKET .)
    $end            reduce using rule 6 (class -> CLASS id L_BRACKET R_BRACKET .)


state 17

    (7) class -> CLASS id L_BRACKET var_s . R_BRACKET
    (9) class -> CLASS id L_BRACKET var_s . method_s R_BRACKET
    (14) var_s -> var_s . var
    (17) method_s -> . method_s method
    (18) method_s -> . method
    (16) var -> . type id SEMICOLON
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE
    (63) id -> . ID

    R_BRACKET       shift and go to state 29
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    ID              shift and go to state 8

    id                             shift and go to state 15
    method_s                       shift and go to state 30
    var                            shift and go to state 31
    method                         shift and go to state 20
    type                           shift and go to state 21
    modifier                       shift and go to state 22

state 18

    (8) class -> CLASS id L_BRACKET method_s . R_BRACKET
    (17) method_s -> method_s . method
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE

    R_BRACKET       shift and go to state 32
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26

    method                         shift and go to state 33
    modifier                       shift and go to state 22

state 19

    (15) var_s -> var .

    R_BRACKET       reduce using rule 15 (var_s -> var .)
    INT             reduce using rule 15 (var_s -> var .)
    BOOLEAN         reduce using rule 15 (var_s -> var .)
    PUBLIC          reduce using rule 15 (var_s -> var .)
    PRIVATE         reduce using rule 15 (var_s -> var .)
    ID              reduce using rule 15 (var_s -> var .)
    RETURN          reduce using rule 15 (var_s -> var .)
    L_BRACKET       reduce using rule 15 (var_s -> var .)
    IF              reduce using rule 15 (var_s -> var .)
    WHILE           reduce using rule 15 (var_s -> var .)
    SYSTEM_OUT_PRINTLN reduce using rule 15 (var_s -> var .)


state 20

    (18) method_s -> method .

    R_BRACKET       reduce using rule 18 (method_s -> method .)
    PUBLIC          reduce using rule 18 (method_s -> method .)
    PRIVATE         reduce using rule 18 (method_s -> method .)


state 21

    (16) var -> type . id SEMICOLON
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 34

state 22

    (19) method -> modifier . type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier . type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier . type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier . type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (63) id -> . ID

    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    ID              shift and go to state 8

    type                           shift and go to state 35
    id                             shift and go to state 15

state 23

    (29) type -> INT . L_SQUARE R_SQUARE
    (31) type -> INT .

    L_SQUARE        shift and go to state 36
    ID              reduce using rule 31 (type -> INT .)


state 24

    (30) type -> BOOLEAN .

    ID              reduce using rule 30 (type -> BOOLEAN .)


state 25

    (27) modifier -> PUBLIC .

    INT             reduce using rule 27 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 27 (modifier -> PUBLIC .)
    ID              reduce using rule 27 (modifier -> PUBLIC .)


state 26

    (28) modifier -> PRIVATE .

    INT             reduce using rule 28 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 28 (modifier -> PRIVATE .)
    ID              reduce using rule 28 (modifier -> PRIVATE .)


state 27

    (10) class -> CLASS id EXTENDS id . L_BRACKET R_BRACKET
    (11) class -> CLASS id EXTENDS id . L_BRACKET var_s R_BRACKET
    (12) class -> CLASS id EXTENDS id . L_BRACKET method_s R_BRACKET
    (13) class -> CLASS id EXTENDS id . L_BRACKET var_s method_s R_BRACKET

    L_BRACKET       shift and go to state 37


state 28

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN . L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    L_ROUND         shift and go to state 38


state 29

    (7) class -> CLASS id L_BRACKET var_s R_BRACKET .

    CLASS           reduce using rule 7 (class -> CLASS id L_BRACKET var_s R_BRACKET .)
    $end            reduce using rule 7 (class -> CLASS id L_BRACKET var_s R_BRACKET .)


state 30

    (9) class -> CLASS id L_BRACKET var_s method_s . R_BRACKET
    (17) method_s -> method_s . method
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE

    R_BRACKET       shift and go to state 39
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26

    method                         shift and go to state 33
    modifier                       shift and go to state 22

state 31

    (14) var_s -> var_s var .

    R_BRACKET       reduce using rule 14 (var_s -> var_s var .)
    INT             reduce using rule 14 (var_s -> var_s var .)
    BOOLEAN         reduce using rule 14 (var_s -> var_s var .)
    PUBLIC          reduce using rule 14 (var_s -> var_s var .)
    PRIVATE         reduce using rule 14 (var_s -> var_s var .)
    ID              reduce using rule 14 (var_s -> var_s var .)
    RETURN          reduce using rule 14 (var_s -> var_s var .)
    L_BRACKET       reduce using rule 14 (var_s -> var_s var .)
    IF              reduce using rule 14 (var_s -> var_s var .)
    WHILE           reduce using rule 14 (var_s -> var_s var .)
    SYSTEM_OUT_PRINTLN reduce using rule 14 (var_s -> var_s var .)


state 32

    (8) class -> CLASS id L_BRACKET method_s R_BRACKET .

    CLASS           reduce using rule 8 (class -> CLASS id L_BRACKET method_s R_BRACKET .)
    $end            reduce using rule 8 (class -> CLASS id L_BRACKET method_s R_BRACKET .)


state 33

    (17) method_s -> method_s method .

    R_BRACKET       reduce using rule 17 (method_s -> method_s method .)
    PUBLIC          reduce using rule 17 (method_s -> method_s method .)
    PRIVATE         reduce using rule 17 (method_s -> method_s method .)


state 34

    (16) var -> type id . SEMICOLON

    SEMICOLON       shift and go to state 40


state 35

    (19) method -> modifier type . id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type . id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type . id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type . id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 41

state 36

    (29) type -> INT L_SQUARE . R_SQUARE

    R_SQUARE        shift and go to state 42


state 37

    (10) class -> CLASS id EXTENDS id L_BRACKET . R_BRACKET
    (11) class -> CLASS id EXTENDS id L_BRACKET . var_s R_BRACKET
    (12) class -> CLASS id EXTENDS id L_BRACKET . method_s R_BRACKET
    (13) class -> CLASS id EXTENDS id L_BRACKET . var_s method_s R_BRACKET
    (14) var_s -> . var_s var
    (15) var_s -> . var
    (17) method_s -> . method_s method
    (18) method_s -> . method
    (16) var -> . type id SEMICOLON
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE
    (63) id -> . ID

    R_BRACKET       shift and go to state 43
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    ID              shift and go to state 8

    id                             shift and go to state 15
    var_s                          shift and go to state 44
    method_s                       shift and go to state 45
    var                            shift and go to state 19
    method                         shift and go to state 20
    type                           shift and go to state 21
    modifier                       shift and go to state 22

state 38

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND . STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    STRING          shift and go to state 46


state 39

    (9) class -> CLASS id L_BRACKET var_s method_s R_BRACKET .

    CLASS           reduce using rule 9 (class -> CLASS id L_BRACKET var_s method_s R_BRACKET .)
    $end            reduce using rule 9 (class -> CLASS id L_BRACKET var_s method_s R_BRACKET .)


state 40

    (16) var -> type id SEMICOLON .

    R_BRACKET       reduce using rule 16 (var -> type id SEMICOLON .)
    INT             reduce using rule 16 (var -> type id SEMICOLON .)
    BOOLEAN         reduce using rule 16 (var -> type id SEMICOLON .)
    PUBLIC          reduce using rule 16 (var -> type id SEMICOLON .)
    PRIVATE         reduce using rule 16 (var -> type id SEMICOLON .)
    ID              reduce using rule 16 (var -> type id SEMICOLON .)
    RETURN          reduce using rule 16 (var -> type id SEMICOLON .)
    L_BRACKET       reduce using rule 16 (var -> type id SEMICOLON .)
    IF              reduce using rule 16 (var -> type id SEMICOLON .)
    WHILE           reduce using rule 16 (var -> type id SEMICOLON .)
    SYSTEM_OUT_PRINTLN reduce using rule 16 (var -> type id SEMICOLON .)


state 41

    (19) method -> modifier type id . L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id . L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type id . L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type id . L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET

    L_ROUND         shift and go to state 47


state 42

    (29) type -> INT L_SQUARE R_SQUARE .

    ID              reduce using rule 29 (type -> INT L_SQUARE R_SQUARE .)


state 43

    (10) class -> CLASS id EXTENDS id L_BRACKET R_BRACKET .

    CLASS           reduce using rule 10 (class -> CLASS id EXTENDS id L_BRACKET R_BRACKET .)
    $end            reduce using rule 10 (class -> CLASS id EXTENDS id L_BRACKET R_BRACKET .)


state 44

    (11) class -> CLASS id EXTENDS id L_BRACKET var_s . R_BRACKET
    (13) class -> CLASS id EXTENDS id L_BRACKET var_s . method_s R_BRACKET
    (14) var_s -> var_s . var
    (17) method_s -> . method_s method
    (18) method_s -> . method
    (16) var -> . type id SEMICOLON
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE
    (63) id -> . ID

    R_BRACKET       shift and go to state 48
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    ID              shift and go to state 8

    id                             shift and go to state 15
    method_s                       shift and go to state 49
    var                            shift and go to state 31
    method                         shift and go to state 20
    type                           shift and go to state 21
    modifier                       shift and go to state 22

state 45

    (12) class -> CLASS id EXTENDS id L_BRACKET method_s . R_BRACKET
    (17) method_s -> method_s . method
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE

    R_BRACKET       shift and go to state 50
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26

    method                         shift and go to state 33
    modifier                       shift and go to state 22

state 46

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING . L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    L_SQUARE        shift and go to state 51


state 47

    (19) method -> modifier type id L_ROUND . arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id L_ROUND . arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type id L_ROUND . arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type id L_ROUND . arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (23) arg_s -> . empty
    (24) arg_s -> . arg_s COMMA arg
    (25) arg_s -> . arg
    (64) empty -> .
    (26) arg -> . type id
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (63) id -> . ID

    R_ROUND         reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    ID              shift and go to state 8

    type                           shift and go to state 52
    id                             shift and go to state 15
    arg_s                          shift and go to state 53
    empty                          shift and go to state 54
    arg                            shift and go to state 55

state 48

    (11) class -> CLASS id EXTENDS id L_BRACKET var_s R_BRACKET .

    CLASS           reduce using rule 11 (class -> CLASS id EXTENDS id L_BRACKET var_s R_BRACKET .)
    $end            reduce using rule 11 (class -> CLASS id EXTENDS id L_BRACKET var_s R_BRACKET .)


state 49

    (13) class -> CLASS id EXTENDS id L_BRACKET var_s method_s . R_BRACKET
    (17) method_s -> method_s . method
    (19) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> . modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (27) modifier -> . PUBLIC
    (28) modifier -> . PRIVATE

    R_BRACKET       shift and go to state 56
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26

    method                         shift and go to state 33
    modifier                       shift and go to state 22

state 50

    (12) class -> CLASS id EXTENDS id L_BRACKET method_s R_BRACKET .

    CLASS           reduce using rule 12 (class -> CLASS id EXTENDS id L_BRACKET method_s R_BRACKET .)
    $end            reduce using rule 12 (class -> CLASS id EXTENDS id L_BRACKET method_s R_BRACKET .)


state 51

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE . R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    R_SQUARE        shift and go to state 57


state 52

    (26) arg -> type . id
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 58

state 53

    (19) method -> modifier type id L_ROUND arg_s . R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id L_ROUND arg_s . R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type id L_ROUND arg_s . R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type id L_ROUND arg_s . R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET
    (24) arg_s -> arg_s . COMMA arg

    R_ROUND         shift and go to state 59
    COMMA           shift and go to state 60


state 54

    (23) arg_s -> empty .

    R_ROUND         reduce using rule 23 (arg_s -> empty .)
    COMMA           reduce using rule 23 (arg_s -> empty .)


state 55

    (25) arg_s -> arg .

    R_ROUND         reduce using rule 25 (arg_s -> arg .)
    COMMA           reduce using rule 25 (arg_s -> arg .)


state 56

    (13) class -> CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET .

    CLASS           reduce using rule 13 (class -> CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET .)
    $end            reduce using rule 13 (class -> CLASS id EXTENDS id L_BRACKET var_s method_s R_BRACKET .)


state 57

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE . id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET
    (63) id -> . ID

    ID              shift and go to state 8

    id                             shift and go to state 61

state 58

    (26) arg -> type id .

    R_ROUND         reduce using rule 26 (arg -> type id .)
    COMMA           reduce using rule 26 (arg -> type id .)


state 59

    (19) method -> modifier type id L_ROUND arg_s R_ROUND . L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id L_ROUND arg_s R_ROUND . L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type id L_ROUND arg_s R_ROUND . L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type id L_ROUND arg_s R_ROUND . L_BRACKET RETURN exp SEMICOLON R_BRACKET

    L_BRACKET       shift and go to state 62


state 60

    (24) arg_s -> arg_s COMMA . arg
    (26) arg -> . type id
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (63) id -> . ID

    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    ID              shift and go to state 8

    arg                            shift and go to state 63
    type                           shift and go to state 52
    id                             shift and go to state 15

state 61

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id . R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET

    R_ROUND         shift and go to state 64


state 62

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET . var_s statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET . var_s RETURN exp SEMICOLON R_BRACKET
    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET . statement_s RETURN exp SEMICOLON R_BRACKET
    (22) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET . RETURN exp SEMICOLON R_BRACKET
    (14) var_s -> . var_s var
    (15) var_s -> . var
    (33) statement_s -> . statement_s statement
    (34) statement_s -> . statement
    (16) var -> . type id SEMICOLON
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (63) id -> . ID

    RETURN          shift and go to state 69
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    ID              shift and go to state 8

    type                           shift and go to state 21
    id                             shift and go to state 65
    var_s                          shift and go to state 67
    statement_s                    shift and go to state 68
    var                            shift and go to state 19
    statement                      shift and go to state 70

state 63

    (24) arg_s -> arg_s COMMA arg .

    R_ROUND         reduce using rule 24 (arg_s -> arg_s COMMA arg .)
    COMMA           reduce using rule 24 (arg_s -> arg_s COMMA arg .)


state 64

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND . L_BRACKET statement_s R_BRACKET R_BRACKET

    L_BRACKET       shift and go to state 74


state 65

    (39) statement -> id . EQUALS exp SEMICOLON
    (40) statement -> id . L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (32) type -> id .

    EQUALS          shift and go to state 75
    L_SQUARE        shift and go to state 76
    ID              reduce using rule 32 (type -> id .)


state 66

    (35) statement -> L_BRACKET . statement_s R_BRACKET
    (33) statement_s -> . statement_s statement
    (34) statement_s -> . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    statement_s                    shift and go to state 77
    statement                      shift and go to state 70
    id                             shift and go to state 78

state 67

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s . statement_s RETURN exp SEMICOLON R_BRACKET
    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s . RETURN exp SEMICOLON R_BRACKET
    (14) var_s -> var_s . var
    (33) statement_s -> . statement_s statement
    (34) statement_s -> . statement
    (16) var -> . type id SEMICOLON
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (29) type -> . INT L_SQUARE R_SQUARE
    (30) type -> . BOOLEAN
    (31) type -> . INT
    (32) type -> . id
    (63) id -> . ID

    RETURN          shift and go to state 80
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    INT             shift and go to state 23
    BOOLEAN         shift and go to state 24
    ID              shift and go to state 8

    type                           shift and go to state 21
    id                             shift and go to state 65
    statement_s                    shift and go to state 79
    var                            shift and go to state 31
    statement                      shift and go to state 70

state 68

    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s . RETURN exp SEMICOLON R_BRACKET
    (33) statement_s -> statement_s . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    RETURN          shift and go to state 81
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    id                             shift and go to state 78
    statement                      shift and go to state 82

state 69

    (22) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN . exp SEMICOLON R_BRACKET
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 85

state 70

    (34) statement_s -> statement .

    RETURN          reduce using rule 34 (statement_s -> statement .)
    L_BRACKET       reduce using rule 34 (statement_s -> statement .)
    IF              reduce using rule 34 (statement_s -> statement .)
    WHILE           reduce using rule 34 (statement_s -> statement .)
    SYSTEM_OUT_PRINTLN reduce using rule 34 (statement_s -> statement .)
    ID              reduce using rule 34 (statement_s -> statement .)
    R_BRACKET       reduce using rule 34 (statement_s -> statement .)


state 71

    (36) statement -> IF . L_ROUND exp R_ROUND statement ELSE statement

    L_ROUND         shift and go to state 92


state 72

    (37) statement -> WHILE . L_ROUND exp R_ROUND statement

    L_ROUND         shift and go to state 93


state 73

    (38) statement -> SYSTEM_OUT_PRINTLN . L_ROUND exp R_ROUND SEMICOLON

    L_ROUND         shift and go to state 94


state 74

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET . statement_s R_BRACKET R_BRACKET
    (33) statement_s -> . statement_s statement
    (34) statement_s -> . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    id                             shift and go to state 78
    statement_s                    shift and go to state 95
    statement                      shift and go to state 70

state 75

    (39) statement -> id EQUALS . exp SEMICOLON
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 96

state 76

    (40) statement -> id L_SQUARE . exp R_SQUARE EQUALS exp SEMICOLON
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 97

state 77

    (35) statement -> L_BRACKET statement_s . R_BRACKET
    (33) statement_s -> statement_s . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    R_BRACKET       shift and go to state 98
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    statement                      shift and go to state 82
    id                             shift and go to state 78

state 78

    (39) statement -> id . EQUALS exp SEMICOLON
    (40) statement -> id . L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON

    EQUALS          shift and go to state 75
    L_SQUARE        shift and go to state 76


state 79

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s . RETURN exp SEMICOLON R_BRACKET
    (33) statement_s -> statement_s . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    RETURN          shift and go to state 99
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    id                             shift and go to state 78
    statement                      shift and go to state 82

state 80

    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN . exp SEMICOLON R_BRACKET
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 100

state 81

    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN . exp SEMICOLON R_BRACKET
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 101

state 82

    (33) statement_s -> statement_s statement .

    RETURN          reduce using rule 33 (statement_s -> statement_s statement .)
    L_BRACKET       reduce using rule 33 (statement_s -> statement_s statement .)
    IF              reduce using rule 33 (statement_s -> statement_s statement .)
    WHILE           reduce using rule 33 (statement_s -> statement_s statement .)
    SYSTEM_OUT_PRINTLN reduce using rule 33 (statement_s -> statement_s statement .)
    ID              reduce using rule 33 (statement_s -> statement_s statement .)
    R_BRACKET       reduce using rule 33 (statement_s -> statement_s statement .)


state 83

    (50) exp -> id .

    SEMICOLON       reduce using rule 50 (exp -> id .)
    L_SQUARE        reduce using rule 50 (exp -> id .)
    DOT             reduce using rule 50 (exp -> id .)
    AND             reduce using rule 50 (exp -> id .)
    LESS            reduce using rule 50 (exp -> id .)
    PLUS            reduce using rule 50 (exp -> id .)
    MINUS           reduce using rule 50 (exp -> id .)
    STAR            reduce using rule 50 (exp -> id .)
    PERCENT         reduce using rule 50 (exp -> id .)
    OR              reduce using rule 50 (exp -> id .)
    R_SQUARE        reduce using rule 50 (exp -> id .)
    R_ROUND         reduce using rule 50 (exp -> id .)
    COMMA           reduce using rule 50 (exp -> id .)


state 84

    (55) exp -> L_ROUND . exp R_ROUND
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 102
    id                             shift and go to state 83

state 85

    (22) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp . SEMICOLON R_BRACKET
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 103
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 86

    (47) exp -> INTEGER .

    SEMICOLON       reduce using rule 47 (exp -> INTEGER .)
    L_SQUARE        reduce using rule 47 (exp -> INTEGER .)
    DOT             reduce using rule 47 (exp -> INTEGER .)
    AND             reduce using rule 47 (exp -> INTEGER .)
    LESS            reduce using rule 47 (exp -> INTEGER .)
    PLUS            reduce using rule 47 (exp -> INTEGER .)
    MINUS           reduce using rule 47 (exp -> INTEGER .)
    STAR            reduce using rule 47 (exp -> INTEGER .)
    PERCENT         reduce using rule 47 (exp -> INTEGER .)
    OR              reduce using rule 47 (exp -> INTEGER .)
    R_SQUARE        reduce using rule 47 (exp -> INTEGER .)
    R_ROUND         reduce using rule 47 (exp -> INTEGER .)
    COMMA           reduce using rule 47 (exp -> INTEGER .)


state 87

    (48) exp -> TRUE .

    SEMICOLON       reduce using rule 48 (exp -> TRUE .)
    L_SQUARE        reduce using rule 48 (exp -> TRUE .)
    DOT             reduce using rule 48 (exp -> TRUE .)
    AND             reduce using rule 48 (exp -> TRUE .)
    LESS            reduce using rule 48 (exp -> TRUE .)
    PLUS            reduce using rule 48 (exp -> TRUE .)
    MINUS           reduce using rule 48 (exp -> TRUE .)
    STAR            reduce using rule 48 (exp -> TRUE .)
    PERCENT         reduce using rule 48 (exp -> TRUE .)
    OR              reduce using rule 48 (exp -> TRUE .)
    R_SQUARE        reduce using rule 48 (exp -> TRUE .)
    R_ROUND         reduce using rule 48 (exp -> TRUE .)
    COMMA           reduce using rule 48 (exp -> TRUE .)


state 88

    (49) exp -> FALSE .

    SEMICOLON       reduce using rule 49 (exp -> FALSE .)
    L_SQUARE        reduce using rule 49 (exp -> FALSE .)
    DOT             reduce using rule 49 (exp -> FALSE .)
    AND             reduce using rule 49 (exp -> FALSE .)
    LESS            reduce using rule 49 (exp -> FALSE .)
    PLUS            reduce using rule 49 (exp -> FALSE .)
    MINUS           reduce using rule 49 (exp -> FALSE .)
    STAR            reduce using rule 49 (exp -> FALSE .)
    PERCENT         reduce using rule 49 (exp -> FALSE .)
    OR              reduce using rule 49 (exp -> FALSE .)
    R_SQUARE        reduce using rule 49 (exp -> FALSE .)
    R_ROUND         reduce using rule 49 (exp -> FALSE .)
    COMMA           reduce using rule 49 (exp -> FALSE .)


state 89

    (51) exp -> THIS .

    SEMICOLON       reduce using rule 51 (exp -> THIS .)
    L_SQUARE        reduce using rule 51 (exp -> THIS .)
    DOT             reduce using rule 51 (exp -> THIS .)
    AND             reduce using rule 51 (exp -> THIS .)
    LESS            reduce using rule 51 (exp -> THIS .)
    PLUS            reduce using rule 51 (exp -> THIS .)
    MINUS           reduce using rule 51 (exp -> THIS .)
    STAR            reduce using rule 51 (exp -> THIS .)
    PERCENT         reduce using rule 51 (exp -> THIS .)
    OR              reduce using rule 51 (exp -> THIS .)
    R_SQUARE        reduce using rule 51 (exp -> THIS .)
    R_ROUND         reduce using rule 51 (exp -> THIS .)
    COMMA           reduce using rule 51 (exp -> THIS .)


state 90

    (52) exp -> NEW . INT L_SQUARE exp R_SQUARE
    (53) exp -> NEW . id L_ROUND R_ROUND
    (63) id -> . ID

    INT             shift and go to state 113
    ID              shift and go to state 8

    id                             shift and go to state 114

state 91

    (54) exp -> BANG . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 115
    id                             shift and go to state 83

state 92

    (36) statement -> IF L_ROUND . exp R_ROUND statement ELSE statement
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 116
    id                             shift and go to state 83

state 93

    (37) statement -> WHILE L_ROUND . exp R_ROUND statement
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 117
    id                             shift and go to state 83

state 94

    (38) statement -> SYSTEM_OUT_PRINTLN L_ROUND . exp R_ROUND SEMICOLON
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 118
    id                             shift and go to state 83

state 95

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s . R_BRACKET R_BRACKET
    (33) statement_s -> statement_s . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    R_BRACKET       shift and go to state 119
    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    id                             shift and go to state 78
    statement                      shift and go to state 82

state 96

    (39) statement -> id EQUALS exp . SEMICOLON
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 120
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 97

    (40) statement -> id L_SQUARE exp . R_SQUARE EQUALS exp SEMICOLON
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_SQUARE        shift and go to state 121
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 98

    (35) statement -> L_BRACKET statement_s R_BRACKET .

    RETURN          reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    L_BRACKET       reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    IF              reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    WHILE           reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    SYSTEM_OUT_PRINTLN reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    ID              reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    R_BRACKET       reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)
    ELSE            reduce using rule 35 (statement -> L_BRACKET statement_s R_BRACKET .)


state 99

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN . exp SEMICOLON R_BRACKET
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 122

state 100

    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp . SEMICOLON R_BRACKET
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 123
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 101

    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp . SEMICOLON R_BRACKET
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 124
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 102

    (55) exp -> L_ROUND exp . R_ROUND
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         shift and go to state 125
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 103

    (22) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON . R_BRACKET

    R_BRACKET       shift and go to state 126


state 104

    (43) exp -> exp L_SQUARE . exp R_SQUARE
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 127
    id                             shift and go to state 83

state 105

    (44) exp -> exp DOT . LENGTH
    (45) exp -> exp DOT . id L_ROUND R_ROUND
    (46) exp -> exp DOT . id L_ROUND exp_s R_ROUND
    (63) id -> . ID

    LENGTH          shift and go to state 128
    ID              shift and go to state 8

    id                             shift and go to state 129

state 106

    (56) exp -> exp AND . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 130
    id                             shift and go to state 83

state 107

    (57) exp -> exp LESS . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 131
    id                             shift and go to state 83

state 108

    (58) exp -> exp PLUS . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 132
    id                             shift and go to state 83

state 109

    (59) exp -> exp MINUS . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 133
    id                             shift and go to state 83

state 110

    (60) exp -> exp STAR . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 134
    id                             shift and go to state 83

state 111

    (61) exp -> exp PERCENT . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 135
    id                             shift and go to state 83

state 112

    (62) exp -> exp OR . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 136
    id                             shift and go to state 83

state 113

    (52) exp -> NEW INT . L_SQUARE exp R_SQUARE

    L_SQUARE        shift and go to state 137


state 114

    (53) exp -> NEW id . L_ROUND R_ROUND

    L_ROUND         shift and go to state 138


state 115

    (54) exp -> BANG exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 54 (exp -> BANG exp .)
    AND             reduce using rule 54 (exp -> BANG exp .)
    LESS            reduce using rule 54 (exp -> BANG exp .)
    PLUS            reduce using rule 54 (exp -> BANG exp .)
    MINUS           reduce using rule 54 (exp -> BANG exp .)
    STAR            reduce using rule 54 (exp -> BANG exp .)
    PERCENT         reduce using rule 54 (exp -> BANG exp .)
    OR              reduce using rule 54 (exp -> BANG exp .)
    R_SQUARE        reduce using rule 54 (exp -> BANG exp .)
    R_ROUND         reduce using rule 54 (exp -> BANG exp .)
    COMMA           reduce using rule 54 (exp -> BANG exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105

  ! L_SQUARE        [ reduce using rule 54 (exp -> BANG exp .) ]
  ! DOT             [ reduce using rule 54 (exp -> BANG exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! LESS            [ shift and go to state 107 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! STAR            [ shift and go to state 110 ]
  ! PERCENT         [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 116

    (36) statement -> IF L_ROUND exp . R_ROUND statement ELSE statement
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         shift and go to state 139
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 117

    (37) statement -> WHILE L_ROUND exp . R_ROUND statement
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         shift and go to state 140
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 118

    (38) statement -> SYSTEM_OUT_PRINTLN L_ROUND exp . R_ROUND SEMICOLON
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         shift and go to state 141
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 119

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET . R_BRACKET

    R_BRACKET       shift and go to state 142


state 120

    (39) statement -> id EQUALS exp SEMICOLON .

    RETURN          reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    L_BRACKET       reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    IF              reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    SYSTEM_OUT_PRINTLN reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    ID              reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    R_BRACKET       reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> id EQUALS exp SEMICOLON .)


state 121

    (40) statement -> id L_SQUARE exp R_SQUARE . EQUALS exp SEMICOLON

    EQUALS          shift and go to state 143


state 122

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp . SEMICOLON R_BRACKET
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 144
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 123

    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON . R_BRACKET

    R_BRACKET       shift and go to state 145


state 124

    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON . R_BRACKET

    R_BRACKET       shift and go to state 146


state 125

    (55) exp -> L_ROUND exp R_ROUND .

    SEMICOLON       reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    L_SQUARE        reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    DOT             reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    AND             reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    LESS            reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    PLUS            reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    MINUS           reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    STAR            reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    PERCENT         reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    OR              reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    R_SQUARE        reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    R_ROUND         reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)
    COMMA           reduce using rule 55 (exp -> L_ROUND exp R_ROUND .)


state 126

    (22) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET .

    R_BRACKET       reduce using rule 22 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET .)
    PUBLIC          reduce using rule 22 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET .)
    PRIVATE         reduce using rule 22 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET RETURN exp SEMICOLON R_BRACKET .)


state 127

    (43) exp -> exp L_SQUARE exp . R_SQUARE
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_SQUARE        shift and go to state 147
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 128

    (44) exp -> exp DOT LENGTH .

    SEMICOLON       reduce using rule 44 (exp -> exp DOT LENGTH .)
    L_SQUARE        reduce using rule 44 (exp -> exp DOT LENGTH .)
    DOT             reduce using rule 44 (exp -> exp DOT LENGTH .)
    AND             reduce using rule 44 (exp -> exp DOT LENGTH .)
    LESS            reduce using rule 44 (exp -> exp DOT LENGTH .)
    PLUS            reduce using rule 44 (exp -> exp DOT LENGTH .)
    MINUS           reduce using rule 44 (exp -> exp DOT LENGTH .)
    STAR            reduce using rule 44 (exp -> exp DOT LENGTH .)
    PERCENT         reduce using rule 44 (exp -> exp DOT LENGTH .)
    OR              reduce using rule 44 (exp -> exp DOT LENGTH .)
    R_SQUARE        reduce using rule 44 (exp -> exp DOT LENGTH .)
    R_ROUND         reduce using rule 44 (exp -> exp DOT LENGTH .)
    COMMA           reduce using rule 44 (exp -> exp DOT LENGTH .)


state 129

    (45) exp -> exp DOT id . L_ROUND R_ROUND
    (46) exp -> exp DOT id . L_ROUND exp_s R_ROUND

    L_ROUND         shift and go to state 148


state 130

    (56) exp -> exp AND exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 56 (exp -> exp AND exp .)
    AND             reduce using rule 56 (exp -> exp AND exp .)
    OR              reduce using rule 56 (exp -> exp AND exp .)
    R_SQUARE        reduce using rule 56 (exp -> exp AND exp .)
    R_ROUND         reduce using rule 56 (exp -> exp AND exp .)
    COMMA           reduce using rule 56 (exp -> exp AND exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111

  ! L_SQUARE        [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! DOT             [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! STAR            [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! PERCENT         [ reduce using rule 56 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! OR              [ shift and go to state 112 ]


state 131

    (57) exp -> exp LESS exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 57 (exp -> exp LESS exp .)
    AND             reduce using rule 57 (exp -> exp LESS exp .)
    LESS            reduce using rule 57 (exp -> exp LESS exp .)
    PLUS            reduce using rule 57 (exp -> exp LESS exp .)
    MINUS           reduce using rule 57 (exp -> exp LESS exp .)
    STAR            reduce using rule 57 (exp -> exp LESS exp .)
    PERCENT         reduce using rule 57 (exp -> exp LESS exp .)
    OR              reduce using rule 57 (exp -> exp LESS exp .)
    R_SQUARE        reduce using rule 57 (exp -> exp LESS exp .)
    R_ROUND         reduce using rule 57 (exp -> exp LESS exp .)
    COMMA           reduce using rule 57 (exp -> exp LESS exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105

  ! L_SQUARE        [ reduce using rule 57 (exp -> exp LESS exp .) ]
  ! DOT             [ reduce using rule 57 (exp -> exp LESS exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! LESS            [ shift and go to state 107 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! STAR            [ shift and go to state 110 ]
  ! PERCENT         [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 132

    (58) exp -> exp PLUS exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 58 (exp -> exp PLUS exp .)
    AND             reduce using rule 58 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 58 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 58 (exp -> exp PLUS exp .)
    OR              reduce using rule 58 (exp -> exp PLUS exp .)
    R_SQUARE        reduce using rule 58 (exp -> exp PLUS exp .)
    R_ROUND         reduce using rule 58 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 58 (exp -> exp PLUS exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    LESS            shift and go to state 107
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111

  ! L_SQUARE        [ reduce using rule 58 (exp -> exp PLUS exp .) ]
  ! DOT             [ reduce using rule 58 (exp -> exp PLUS exp .) ]
  ! LESS            [ reduce using rule 58 (exp -> exp PLUS exp .) ]
  ! STAR            [ reduce using rule 58 (exp -> exp PLUS exp .) ]
  ! PERCENT         [ reduce using rule 58 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! OR              [ shift and go to state 112 ]


state 133

    (59) exp -> exp MINUS exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 59 (exp -> exp MINUS exp .)
    AND             reduce using rule 59 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 59 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 59 (exp -> exp MINUS exp .)
    OR              reduce using rule 59 (exp -> exp MINUS exp .)
    R_SQUARE        reduce using rule 59 (exp -> exp MINUS exp .)
    R_ROUND         reduce using rule 59 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 59 (exp -> exp MINUS exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    LESS            shift and go to state 107
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111

  ! L_SQUARE        [ reduce using rule 59 (exp -> exp MINUS exp .) ]
  ! DOT             [ reduce using rule 59 (exp -> exp MINUS exp .) ]
  ! LESS            [ reduce using rule 59 (exp -> exp MINUS exp .) ]
  ! STAR            [ reduce using rule 59 (exp -> exp MINUS exp .) ]
  ! PERCENT         [ reduce using rule 59 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! OR              [ shift and go to state 112 ]


state 134

    (60) exp -> exp STAR exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 60 (exp -> exp STAR exp .)
    AND             reduce using rule 60 (exp -> exp STAR exp .)
    PLUS            reduce using rule 60 (exp -> exp STAR exp .)
    MINUS           reduce using rule 60 (exp -> exp STAR exp .)
    STAR            reduce using rule 60 (exp -> exp STAR exp .)
    PERCENT         reduce using rule 60 (exp -> exp STAR exp .)
    OR              reduce using rule 60 (exp -> exp STAR exp .)
    R_SQUARE        reduce using rule 60 (exp -> exp STAR exp .)
    R_ROUND         reduce using rule 60 (exp -> exp STAR exp .)
    COMMA           reduce using rule 60 (exp -> exp STAR exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    LESS            shift and go to state 107

  ! L_SQUARE        [ reduce using rule 60 (exp -> exp STAR exp .) ]
  ! DOT             [ reduce using rule 60 (exp -> exp STAR exp .) ]
  ! LESS            [ reduce using rule 60 (exp -> exp STAR exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! STAR            [ shift and go to state 110 ]
  ! PERCENT         [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 135

    (61) exp -> exp PERCENT exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 61 (exp -> exp PERCENT exp .)
    AND             reduce using rule 61 (exp -> exp PERCENT exp .)
    PLUS            reduce using rule 61 (exp -> exp PERCENT exp .)
    MINUS           reduce using rule 61 (exp -> exp PERCENT exp .)
    PERCENT         reduce using rule 61 (exp -> exp PERCENT exp .)
    OR              reduce using rule 61 (exp -> exp PERCENT exp .)
    R_SQUARE        reduce using rule 61 (exp -> exp PERCENT exp .)
    R_ROUND         reduce using rule 61 (exp -> exp PERCENT exp .)
    COMMA           reduce using rule 61 (exp -> exp PERCENT exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    LESS            shift and go to state 107
    STAR            shift and go to state 110

  ! L_SQUARE        [ reduce using rule 61 (exp -> exp PERCENT exp .) ]
  ! DOT             [ reduce using rule 61 (exp -> exp PERCENT exp .) ]
  ! LESS            [ reduce using rule 61 (exp -> exp PERCENT exp .) ]
  ! STAR            [ reduce using rule 61 (exp -> exp PERCENT exp .) ]
  ! AND             [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 108 ]
  ! MINUS           [ shift and go to state 109 ]
  ! PERCENT         [ shift and go to state 111 ]
  ! OR              [ shift and go to state 112 ]


state 136

    (62) exp -> exp OR exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       reduce using rule 62 (exp -> exp OR exp .)
    OR              reduce using rule 62 (exp -> exp OR exp .)
    R_SQUARE        reduce using rule 62 (exp -> exp OR exp .)
    R_ROUND         reduce using rule 62 (exp -> exp OR exp .)
    COMMA           reduce using rule 62 (exp -> exp OR exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111

  ! L_SQUARE        [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! DOT             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! STAR            [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! PERCENT         [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 112 ]


state 137

    (52) exp -> NEW INT L_SQUARE . exp R_SQUARE
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 149
    id                             shift and go to state 83

state 138

    (53) exp -> NEW id L_ROUND . R_ROUND

    R_ROUND         shift and go to state 150


state 139

    (36) statement -> IF L_ROUND exp R_ROUND . statement ELSE statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    statement                      shift and go to state 151
    id                             shift and go to state 78

state 140

    (37) statement -> WHILE L_ROUND exp R_ROUND . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    statement                      shift and go to state 152
    id                             shift and go to state 78

state 141

    (38) statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND . SEMICOLON

    SEMICOLON       shift and go to state 153


state 142

    (3) main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET .

    CLASS           reduce using rule 3 (main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET .)
    $end            reduce using rule 3 (main_class -> CLASS id L_BRACKET PUBLIC STATIC_VOID_MAIN L_ROUND STRING L_SQUARE R_SQUARE id R_ROUND L_BRACKET statement_s R_BRACKET R_BRACKET .)


state 143

    (40) statement -> id L_SQUARE exp R_SQUARE EQUALS . exp SEMICOLON
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    id                             shift and go to state 83
    exp                            shift and go to state 154

state 144

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON . R_BRACKET

    R_BRACKET       shift and go to state 155


state 145

    (20) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET .

    R_BRACKET       reduce using rule 20 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET .)
    PUBLIC          reduce using rule 20 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET .)
    PRIVATE         reduce using rule 20 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s RETURN exp SEMICOLON R_BRACKET .)


state 146

    (21) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET .

    R_BRACKET       reduce using rule 21 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET .)
    PUBLIC          reduce using rule 21 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET .)
    PRIVATE         reduce using rule 21 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET statement_s RETURN exp SEMICOLON R_BRACKET .)


state 147

    (43) exp -> exp L_SQUARE exp R_SQUARE .

    SEMICOLON       reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    L_SQUARE        reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    DOT             reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    AND             reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    LESS            reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    PLUS            reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    MINUS           reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    STAR            reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    PERCENT         reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    OR              reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    R_SQUARE        reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    R_ROUND         reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)
    COMMA           reduce using rule 43 (exp -> exp L_SQUARE exp R_SQUARE .)


state 148

    (45) exp -> exp DOT id L_ROUND . R_ROUND
    (46) exp -> exp DOT id L_ROUND . exp_s R_ROUND
    (41) exp_s -> . exp_s COMMA exp
    (42) exp_s -> . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    R_ROUND         shift and go to state 157
    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 156
    id                             shift and go to state 83
    exp_s                          shift and go to state 158

state 149

    (52) exp -> NEW INT L_SQUARE exp . R_SQUARE
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_SQUARE        shift and go to state 159
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 150

    (53) exp -> NEW id L_ROUND R_ROUND .

    SEMICOLON       reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    L_SQUARE        reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    DOT             reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    AND             reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    LESS            reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    PLUS            reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    MINUS           reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    STAR            reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    PERCENT         reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    OR              reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    R_SQUARE        reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    R_ROUND         reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)
    COMMA           reduce using rule 53 (exp -> NEW id L_ROUND R_ROUND .)


state 151

    (36) statement -> IF L_ROUND exp R_ROUND statement . ELSE statement

    ELSE            shift and go to state 160


state 152

    (37) statement -> WHILE L_ROUND exp R_ROUND statement .

    RETURN          reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    L_BRACKET       reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    IF              reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    WHILE           reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    SYSTEM_OUT_PRINTLN reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    ID              reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    R_BRACKET       reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)
    ELSE            reduce using rule 37 (statement -> WHILE L_ROUND exp R_ROUND statement .)


state 153

    (38) statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .

    RETURN          reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    L_BRACKET       reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    IF              reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    SYSTEM_OUT_PRINTLN reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    ID              reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    R_BRACKET       reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON .)


state 154

    (40) statement -> id L_SQUARE exp R_SQUARE EQUALS exp . SEMICOLON
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    SEMICOLON       shift and go to state 161
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 155

    (19) method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET .

    R_BRACKET       reduce using rule 19 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET .)
    PUBLIC          reduce using rule 19 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET .)
    PRIVATE         reduce using rule 19 (method -> modifier type id L_ROUND arg_s R_ROUND L_BRACKET var_s statement_s RETURN exp SEMICOLON R_BRACKET .)


state 156

    (42) exp_s -> exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         reduce using rule 42 (exp_s -> exp .)
    COMMA           reduce using rule 42 (exp_s -> exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112


state 157

    (45) exp -> exp DOT id L_ROUND R_ROUND .

    SEMICOLON       reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    L_SQUARE        reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    DOT             reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    AND             reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    LESS            reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    PLUS            reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    MINUS           reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    STAR            reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    PERCENT         reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    OR              reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    R_SQUARE        reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    R_ROUND         reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)
    COMMA           reduce using rule 45 (exp -> exp DOT id L_ROUND R_ROUND .)


state 158

    (46) exp -> exp DOT id L_ROUND exp_s . R_ROUND
    (41) exp_s -> exp_s . COMMA exp

    R_ROUND         shift and go to state 162
    COMMA           shift and go to state 163


state 159

    (52) exp -> NEW INT L_SQUARE exp R_SQUARE .

    SEMICOLON       reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    L_SQUARE        reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    DOT             reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    AND             reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    LESS            reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    PLUS            reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    MINUS           reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    STAR            reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    PERCENT         reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    OR              reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    R_SQUARE        reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    R_ROUND         reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)
    COMMA           reduce using rule 52 (exp -> NEW INT L_SQUARE exp R_SQUARE .)


state 160

    (36) statement -> IF L_ROUND exp R_ROUND statement ELSE . statement
    (35) statement -> . L_BRACKET statement_s R_BRACKET
    (36) statement -> . IF L_ROUND exp R_ROUND statement ELSE statement
    (37) statement -> . WHILE L_ROUND exp R_ROUND statement
    (38) statement -> . SYSTEM_OUT_PRINTLN L_ROUND exp R_ROUND SEMICOLON
    (39) statement -> . id EQUALS exp SEMICOLON
    (40) statement -> . id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON
    (63) id -> . ID

    L_BRACKET       shift and go to state 66
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    SYSTEM_OUT_PRINTLN shift and go to state 73
    ID              shift and go to state 8

    statement                      shift and go to state 164
    id                             shift and go to state 78

state 161

    (40) statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .

    RETURN          reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    L_BRACKET       reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    IF              reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    SYSTEM_OUT_PRINTLN reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    ID              reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    R_BRACKET       reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)
    ELSE            reduce using rule 40 (statement -> id L_SQUARE exp R_SQUARE EQUALS exp SEMICOLON .)


state 162

    (46) exp -> exp DOT id L_ROUND exp_s R_ROUND .

    SEMICOLON       reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    L_SQUARE        reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    DOT             reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    AND             reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    LESS            reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    PLUS            reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    MINUS           reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    STAR            reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    PERCENT         reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    OR              reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    R_SQUARE        reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    R_ROUND         reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)
    COMMA           reduce using rule 46 (exp -> exp DOT id L_ROUND exp_s R_ROUND .)


state 163

    (41) exp_s -> exp_s COMMA . exp
    (43) exp -> . exp L_SQUARE exp R_SQUARE
    (44) exp -> . exp DOT LENGTH
    (45) exp -> . exp DOT id L_ROUND R_ROUND
    (46) exp -> . exp DOT id L_ROUND exp_s R_ROUND
    (47) exp -> . INTEGER
    (48) exp -> . TRUE
    (49) exp -> . FALSE
    (50) exp -> . id
    (51) exp -> . THIS
    (52) exp -> . NEW INT L_SQUARE exp R_SQUARE
    (53) exp -> . NEW id L_ROUND R_ROUND
    (54) exp -> . BANG exp
    (55) exp -> . L_ROUND exp R_ROUND
    (56) exp -> . exp AND exp
    (57) exp -> . exp LESS exp
    (58) exp -> . exp PLUS exp
    (59) exp -> . exp MINUS exp
    (60) exp -> . exp STAR exp
    (61) exp -> . exp PERCENT exp
    (62) exp -> . exp OR exp
    (63) id -> . ID

    INTEGER         shift and go to state 86
    TRUE            shift and go to state 87
    FALSE           shift and go to state 88
    THIS            shift and go to state 89
    NEW             shift and go to state 90
    BANG            shift and go to state 91
    L_ROUND         shift and go to state 84
    ID              shift and go to state 8

    exp                            shift and go to state 165
    id                             shift and go to state 83

state 164

    (36) statement -> IF L_ROUND exp R_ROUND statement ELSE statement .

    RETURN          reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    L_BRACKET       reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    IF              reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    WHILE           reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    SYSTEM_OUT_PRINTLN reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    ID              reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    R_BRACKET       reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)
    ELSE            reduce using rule 36 (statement -> IF L_ROUND exp R_ROUND statement ELSE statement .)


state 165

    (41) exp_s -> exp_s COMMA exp .
    (43) exp -> exp . L_SQUARE exp R_SQUARE
    (44) exp -> exp . DOT LENGTH
    (45) exp -> exp . DOT id L_ROUND R_ROUND
    (46) exp -> exp . DOT id L_ROUND exp_s R_ROUND
    (56) exp -> exp . AND exp
    (57) exp -> exp . LESS exp
    (58) exp -> exp . PLUS exp
    (59) exp -> exp . MINUS exp
    (60) exp -> exp . STAR exp
    (61) exp -> exp . PERCENT exp
    (62) exp -> exp . OR exp

    R_ROUND         reduce using rule 41 (exp_s -> exp_s COMMA exp .)
    COMMA           reduce using rule 41 (exp_s -> exp_s COMMA exp .)
    L_SQUARE        shift and go to state 104
    DOT             shift and go to state 105
    AND             shift and go to state 106
    LESS            shift and go to state 107
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    STAR            shift and go to state 110
    PERCENT         shift and go to state 111
    OR              shift and go to state 112

